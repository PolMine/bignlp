% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AnnotatorCoreNLP.R
\name{AnnotatorCoreNLP}
\alias{AnnotatorCoreNLP}
\title{Stanford CoreNLP Annotator Class.}
\description{
Stanford CoreNLP Annotator Class.

Stanford CoreNLP Annotator Class.
}
\examples{
Sys.setenv("_JAVA_OPTIONS" = "")
options(java.parameters = "-Xmx4g")
if (getOption("bignlp.corenlp_dir") == "") corenlp_install(lang = "de")

txt <- "Das ist ein Satz. Und das ist ein zweiter Satz."

CNLP <- AnnotatorCoreNLP$new(
  method = "json",
  corenlp_dir = getOption("bignlp.corenlp_dir"),
  properties_file = corenlp_get_properties_file(lang = "de")
  )
CNLP$annotate(txt = txt)
CNLP$annotate(txt = txt, id = 15L)

CNLP <- AnnotatorCoreNLP$new(
  method = "xml",
  properties_file = corenlp_get_properties_file(lang = "de")
)
CNLP$annotate(txt = txt)

\dontrun{
# Java parallellization
options(java.parameters = "-Xmx4g")
library(polmineR)
library(bignlp)
properties <- list(
  "threads" = "6",
  "annotators" = "tokenize, ssplit, pos, lemma, ner",
  "tokenize.language" = "de",
  "tokenize.postProcessor" = "edu.stanford.nlp.international.german.process.GermanTokenizerPostProcessor",
  "pos.model" = "edu/stanford/nlp/models/pos-tagger/german-ud.tagger",
  "ner.model" = "edu/stanford/nlp/models/ner/german.distsim.crf.ser.gz",
  "ner.applyNumericClassifiers" = "false",
  "ner.applyFineGrained" = "false",
  "ner.useSUTime" = "false",
  "ner.nthreads" = "6"
)
CNLP <- AnnotatorCoreNLP$new(method = "json", properties_file = properties)
merkel <- corpus("GERMAPARL") \%>\%
  subset(speaker == "Angela Merkel" & interjection == "FALSE") \%>\%
  get_token_stream(beautify = TRUE, collapse = " ")
system.time(foo <- CNLP$annotate(merkel))
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tagger}}{Class from Stanford CoreNLP to annotate text}

\item{\code{xmlifier}}{Class from Stanford CoreNLP to generate XML output}

\item{\code{jsonifier}}{Class from Stanford CoreNLP to generate JSON output}

\item{\code{writer}}{Class from Stanford CoreNLP to generate TXT output}

\item{\code{append}}{logical, whether to append output to destfile}

\item{\code{method}}{whith output format to use}

\item{\code{cols_to_keep}}{columns from output to keep}

\item{\code{destfile}}{filename}

\item{\code{logfile}}{Where to write logs.}

\item{\code{target}}{Number of steps to takeâ€¦}

\item{\code{current}}{Where the process stands now.}

\item{\code{report_interval}}{Frequency of messages on memory consumption.}

\item{\code{gc_interval}}{Frequency of garbage collection.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{AnnotatorCoreNLP$new()}}
\item \href{#method-annotation_to_xml}{\code{AnnotatorCoreNLP$annotation_to_xml()}}
\item \href{#method-annotation_to_json}{\code{AnnotatorCoreNLP$annotation_to_json()}}
\item \href{#method-annotation_to_txt}{\code{AnnotatorCoreNLP$annotation_to_txt()}}
\item \href{#method-show_memory_usage}{\code{AnnotatorCoreNLP$show_memory_usage()}}
\item \href{#method-collect_garbage}{\code{AnnotatorCoreNLP$collect_garbage()}}
\item \href{#method-annotate}{\code{AnnotatorCoreNLP$annotate()}}
\item \href{#method-process_files}{\code{AnnotatorCoreNLP$process_files()}}
\item \href{#method-verbose}{\code{AnnotatorCoreNLP$verbose()}}
\item \href{#method-clone}{\code{AnnotatorCoreNLP$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$new(
  corenlp_dir = getOption("bignlp.corenlp_dir"),
  properties_file,
  method = NULL,
  cols_to_keep = c("sentence", "id", "token", "pos", "ner"),
  destfile = NULL,
  logfile = NULL,
  target = NULL,
  report_interval = 1L,
  gc_interval = 100L
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{corenlp_dir}}{Directory of StanfordCoreNLP.}

\item{\code{properties_file}}{Either the filename of a properties file or a Java
properties object.}

\item{\code{method}}{Either "txt", "json" or "xml", defaults to NULL.}

\item{\code{cols_to_keep}}{Columns of the parsed NLP output to keep.}

\item{\code{destfile}}{Where to write parser output.}

\item{\code{logfile}}{Where to write logs.}

\item{\code{target}}{????}

\item{\code{report_interval}}{Frequency of report on memory consumption.}

\item{\code{gc_interval}}{Frequency of garbage collection.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-annotation_to_xml"></a>}}
\if{latex}{\out{\hypertarget{method-annotation_to_xml}{}}}
\subsection{Method \code{annotation_to_xml()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$annotation_to_xml(anno)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{anno}}{Annotation to process.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-annotation_to_json"></a>}}
\if{latex}{\out{\hypertarget{method-annotation_to_json}{}}}
\subsection{Method \code{annotation_to_json()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$annotation_to_json(anno, id = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{anno}}{Annotation to process.}

\item{\code{id}}{The ID to prepend.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-annotation_to_txt"></a>}}
\if{latex}{\out{\hypertarget{method-annotation_to_txt}{}}}
\subsection{Method \code{annotation_to_txt()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$annotation_to_txt(anno)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{anno}}{Annotation to process.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-show_memory_usage"></a>}}
\if{latex}{\out{\hypertarget{method-show_memory_usage}{}}}
\subsection{Method \code{show_memory_usage()}}{
Get information on memory usage within the JVM and
show it as a message or append it to logfile.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$show_memory_usage(logfile = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{logfile}}{Name of a logfile.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-collect_garbage"></a>}}
\if{latex}{\out{\hypertarget{method-collect_garbage}{}}}
\subsection{Method \code{collect_garbage()}}{
Trigger garbage collection in JVM.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$collect_garbage()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-annotate"></a>}}
\if{latex}{\out{\hypertarget{method-annotate}{}}}
\subsection{Method \code{annotate()}}{
Annotate a string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$annotate(txt, id = NULL, purge = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{txt}}{A (length-one) \code{character} vector to process.}

\item{\code{id}}{An ID to prepend.}

\item{\code{purge}}{Whether to postprocess output.}

\item{\code{current}}{Where process stands.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-process_files"></a>}}
\if{latex}{\out{\hypertarget{method-process_files}{}}}
\subsection{Method \code{process_files()}}{
Process all files in the stated directory (argument \code{dir}).
Parallel processing is possible if a 'threads' key the properties
object is defined and sets a number of cores to use.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$process_files(dir)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{Directory with files to process (in parallel).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The method returns (invisibly) the files expected to result from
the tagging exercise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-verbose"></a>}}
\if{latex}{\out{\hypertarget{method-verbose}{}}}
\subsection{Method \code{verbose()}}{
Set whether calls of the class shall be verbose.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$verbose(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{A \code{logical} value. If \code{TRUE}, all status messages are shown, if
\code{FALSE}, only error messages are displayed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The class is returned invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AnnotatorCoreNLP$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
