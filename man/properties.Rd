% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/properties.R
\name{properties}
\alias{properties}
\alias{parse_properties_file}
\alias{properties_set_threads}
\alias{properties_get_threads}
\alias{properties_set_output_directory}
\alias{properties_get_output_directory}
\alias{properties_set_output_format}
\alias{properties_get_output_format}
\title{Instantiate and manage properties.}
\usage{
properties(x)

parse_properties_file(x)

properties_set_threads(p, k)

properties_get_threads(p)

properties_set_output_directory(p, dir)

properties_get_output_directory(p)

properties_set_output_format(p, fmt)

properties_get_output_format(x)
}
\arguments{
\item{x}{Path of a propeties file or named list of properties.}

\item{p}{A properties object.}

\item{k}{The number of threads used to process files. Needs to be a
reasonable value, but need not be an integer value as value will be coerced
to \code{character} vector anyway.}

\item{dir}{The output directory for processed data.}

\item{fmt}{The output format to use, a length-one \code{character} vector. Use 'json' for
JSON output.}
}
\description{
StanfordCoreNLP uses a
\href{https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html}{Properties}
class object for the settings to configure the parser. This includes the
number of threads to use, an output directory etc. The \code{properties} function
instantiates this Java object from a properties file or a \code{list}. A set of
auxiliary functions can be used to set and get properties relevant for the
workflow envisaged by this package.
}
\details{
The \code{properties()} function will instantiate a properties object
from a (named) \code{list} or a \code{character} vector with the path to a properties
file.

The \code{parse_properties_file()} function instantiates a properties
object from a properties file or a named list.

The number of threads used to process files in parallel is defined
by the property 'threads'. Auxiliary functions \code{properties_get_threads()}
and \code{properties_set_threads()} get and set the value.
}
\examples{
# Instantiate properties from properties file

props_german <- system.file(
  package = "bignlp",
  "extdata", "properties_files",
  "corenlp-german-fast.properties"
)
plist <- parse_properties_file(props_german)
props <- properties(plist)


# Instantiate properties from list

properties <- list(
  "annotators" = "tokenize, ssplit, pos, lemma, ner",
  "tokenize.language" = "de",
  "tokenize.postProcessor" = "edu.stanford.nlp.international.german.process.GermanTokenizerPostProcessor",
  "pos.model" = "edu/stanford/nlp/models/pos-tagger/german-ud.tagger",
  "ner.model" = "edu/stanford/nlp/models/ner/german.distsim.crf.ser.gz",
  "ner.applyNumericClassifiers" = "false",
  "ner.applyFineGrained" = "false",
  "ner.useSUTime" = "false",
  "outputFormat" = "json",
  "outputDirectory" = "/Users/andreasblaette/Lab/tmp/corenlp/json"
)
props
}
