% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json.R
\name{corenlp_parse_ndjson}
\alias{corenlp_parse_ndjson}
\alias{corenlp_parse_json}
\title{Parse NDJSON output.}
\usage{
corenlp_parse_ndjson(
  input,
  cols_to_keep = c("sentence", "index", "word", "pos", "lemma"),
  output = tempfile(),
  logfile = NULL,
  byline = FALSE,
  threads = 1L,
  progress = TRUE,
  verbose = TRUE
)

corenlp_parse_json(
  input,
  cols_to_keep = c("sentence", "index", "word", "pos", "ner"),
  output = NULL,
  logfile = NULL,
  progress = TRUE
)
}
\arguments{
\item{input}{For \code{corenlp_parse_json} a \code{character} vector with one
or several JSON string(s) to be parsed. For \code{corenlp_parse_ndjson}, a
directory with ndjson files, a single or multiple files.}

\item{cols_to_keep}{A \code{character} vector, columns of the parsed json
input to keep.}

\item{output}{A \code{character} string naming the file, or the files to
write to.}

\item{logfile}{A \code{character} vector naming the file to an error log to;
if provided, json strings will be written to this file if parsing the json
string string fails.}

\item{byline}{A \code{logical} value, whether to process input files in a
line-by-line mode.}

\item{threads}{An \code{integer} value, number of threads to use.}

\item{progress}{A \code{logical} value, whether to show progress bar.}

\item{verbose}{A \code{logical} value, whether to output intermediate
messages.}
}
\value{
A \code{character} vector with the target files.
}
\description{
Turn Stanford CoreNLP json or ndjson output into tabular format.

Parse the json output from CoreNLP, either text files, or
NDJSON written to one or multiple files.
}
\details{
\code{corenlp_parse_json} parses json output of CoreNLP, returning a
\code{data.frame}. It serves as the worker for \code{corenlp_parse_ndjson},
which can process an entire file, a set of files, or all files in a
directory. The arguments \code{byline}, \code{threads} and \code{progress}
offer combinations to process input files in a line-by-line mode, using
multiple threads, and displaying progress bars.

See \url{https://stackoverflow.com/questions/51032141/reading-in-very-very-large-ndjson}.

The JSON results of applying the Stanford CoreNLP annotators can be
written to a streaming JSON file (ndjson format). \code{corenlp_parse_json}
will parse a json string to a data.frame. If output is specified, the
output will be appended to the file provided. If \code{output} is \code{NULL}, a
data.frame is returned. Strings that cannot be parsed are written to the
logfile, if it is defined. If \code{filename} is present, the function will
process one or more files with the output of Stanford CoreNLP in a NDJSON
format. If the argument \code{output} has been defined during initialization, results are
written/appended to that file. Otherwise, a \code{data.frame} is returned.
}
\examples{
# parse an ndjson string
ndjson_file <- system.file(package = "bignlp", "extdata", "ndjson", "reuters_1.ndjson")
ndjson_string <- readLines(ndjson_file)
df <- corenlp_parse_json(ndjson_string, cols = c("word", "pos", "lemma"), progress = FALSE)

# parse ndjson file with / without progress bar
destfile <- corenlp_parse_ndjson(input = ndjson_file, output = tempfile(), progress = FALSE)
dt <- data.table::fread(destfile)
destfile <- corenlp_parse_ndjson(input = ndjson_file, output = tempfile(), progress = TRUE)
dt <- data.table::fread(destfile)

# parse all ndjson files in a directory
ndjson_dir <- system.file(package = "bignlp", "extdata", "ndjson")
tsv_file <- tempfile()
destfile <- corenlp_parse_ndjson(input = ndjson_dir, output = tempfile(), threads = 1L)
dt <- data.table::fread(destfile)

# parse a set files with specified output files
destfiles <- corenlp_parse_ndjson(
  input = list.files(ndjson_dir, full.names = TRUE),
  output = sprintf("\%s/reuters_annotated_\%d.tsv", tempdir(), 1L:4L),
  threads = 1L
  )
dt <- data.table::rbindlist(lapply(destfiles, data.table::fread))

destfiles <- corenlp_parse_ndjson(
  input = list.files(ndjson_dir, full.names = TRUE),
  output = sprintf("\%s/reuters_annotated_\%d.tsv", tempdir(), 1L:4L),
  threads = 4L,
  byline = TRUE,
  progress = FALSE
)
}
