% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json.R
\name{corenlp_parse_ndjson}
\alias{corenlp_parse_ndjson}
\alias{corenlp_parse_json}
\title{Parse json or ndjson output.}
\usage{
corenlp_parse_ndjson(x, cols_to_keep = c("sentence", "index", "word", "pos",
  "lemma"), destfile = NULL, logfile = NULL, threads = 1L,
  progress = TRUE, verbose = TRUE)

corenlp_parse_json(x, cols_to_keep = c("sentence", "index", "word", "pos",
  "ner"), destfile = NULL, logfile = NULL, progress = TRUE)
}
\arguments{
\item{x}{character vector, the JSON string(s) to be parsed}

\item{cols_to_keep}{columns to keep}

\item{destfile}{a character string naming the file to write to}

\item{logfile}{a character string naming the file to an error log to; if
provided, json strings will be written to this file if parsing the json
string string fails}

\item{threads}{integer}

\item{progress}{logical}

\item{verbose}{logical}
}
\value{
A character vector with the target files.
}
\description{
Turn json or ndjson output from Stanford CoreNLP into tabular format

Parse the json output from CoreNLP, either text files, or 
NDJSON written to one or multiple files.
}
\details{
The JSON results of applying the Stanford CoreNLP annotators can be
  written to a streaming JSON file (ndjson format). \code{corenlp_parse_json}
  will parse a json string to a data.frame. If a destfile is specified, the
  output will be appended to the file provided. Without a destfile, a
  data.frame is returned. Strings that cannot be parsed are written to the
  logfile, if it is defined. If \code{filename} is present, the function will
  process one or more files with the output of Stanford CoreNLP in a NDJSON
  format. If a destfile has been defined during initialization, results are
  written/appended to that file. Otherwise, a \code{data.frame} is returned.
}
\examples{
ndjson_file <- system.file(package = "bignlp", "extdata", "ndjson", "reuters_1.ndjson")
cols <- c("sentence", "index", "word", "pos", "lemma")
json_string <- readLines(ndjson_file)
dt <- corenlp_parse_json(json_string, cols_to_keep = cols, progress = FALSE)

dt <- corenlp_parse_ndjson(x = ndjson_file, cols_to_keep = cols, destfile = NULL, progress = FALSE)
dt <- corenlp_parse_ndjson(x = ndjson_file, cols_to_keep = cols, destfile = NULL, progress = TRUE)

tsv_file <- tempfile()
dt <- corenlp_parse_ndjson(x = ndjson_file, cols_to_keep = cols, destfile = tsv_file, progress = FALSE)
y <- data.table::fread(tsv_file)
dt <- corenlp_parse_ndjson(x = ndjson_file, cols_to_keep = cols, destfile = tsv_file, progress = TRUE)
y <- data.table::fread(tsv_file)

ndjson_dir <- system.file(package = "bignlp", "extdata", "ndjson")
tsv_file <- tempfile()
corenlp_parse_ndjson(x = ndjson_dir, cols_to_keep = cols, destfile = tsv_file, threads = 1L)
y <- data.table::fread(tsv_file)
tsv_dir <- tempdir()
tsv_files <- sprintf("\%s/reuters_annotated_\%d.tsv", tsv_dir, 1L:4L)
corenlp_parse_ndjson(
  x = list.files(ndjson_dir, full.names = TRUE),
  cols_to_keep = cols, destfile = tsv_files,
  threads = 1L
  )
dt <- data.table::rbindlist(lapply(tsv_files, data.table::fread))
}
