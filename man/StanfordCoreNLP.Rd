% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/StanfordCoreNLP.R
\name{StanfordCoreNLP}
\alias{StanfordCoreNLP}
\title{StanfordCoreNLP Annotator Class.}
\description{
StanfordCoreNLP Annotator Class.

StanfordCoreNLP Annotator Class.
}
\details{
The StanfordCoreNLP class exposes the pipeline of StanfordCoreNLP for
processing text. Its main functionality is exposed to R by way of an R6
class. The special focus of this implementation is to use the multithreading
capacities of StanfordCoreNLP from R.

The StanfordCorenNLP pipeline uses multithreading (a) by processing files in
parallel. This requires that chunks of text are present as files in one
directory. The \verb{$processFiles()} method exposes this functionality. The
number of threads to be used is controlled by setting the property "threads"
accordingly, see examples and vignette. This approach is fast and memory
efficient, as it allows effectively a line-by-line approach.

The second approach to multithreading is (b) to process sentences in
parallel, i.e. after tokenization and sentence segmentation further annotation
tasks such as POS annotation and NER recognition are carried out in parallel.
Whether this parallelization is used is controlled by setting the properties
"pos.nthreads", "ner.nthreads" and alike. See examples.
}
\examples{
Sys.setenv("_JAVA_OPTIONS" = "")
options(java.parameters = "-Xmx4g")
if (getOption("bignlp.corenlp_dir") == "") corenlp_install(lang = "de")

txt <- "Das ist ein Satz. Und das ist ein zweiter Satz."

props_file <- corenlp_get_properties_file(lang = "de")
CNLP <- StanfordCoreNLP$new(output_format = "json", properties = props_file)
j <- CNLP$annotate(txt = txt)

CNLP <- StanfordCoreNLP$new(output_format = "xml", properties = props_file)
x <- CNLP$annotate(txt = txt)

CNLP <- StanfordCoreNLP$new(output_format = "conll", properties = props_file)
c <- CNLP$annotate(txt = txt)


# Java parallellization - processing sentences in parallel

library(data.table)
reuters_txt <- readLines(system.file(package = "bignlp", "extdata", "txt", "reuters.txt"))
dt <- data.table(id = 1L:length(reuters_txt), text = reuters_txt)

options(java.parameters = "-Xmx4g")

n_cores <- as.character(parallel::detectCores() - 1L)
properties_file <- corenlp_get_properties_file(lang = "en", fast = TRUE)
props <- properties(properties_file)
props$put("pos.nthreads", as.character(parallel::detectCores() - 1L))
props$put("ner.nthreads", as.character(parallel::detectCores() - 1L))

CNLP <- StanfordCoreNLP$new(output_format = "conll", properties = props)

y <- CNLP$annotate(dt[1][["text"]])
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{pipeline}}{Instance of the StanfordCoreNLP class.}

\item{\code{outputter}}{An outputter (JSON, CoNLL, XML) to generate string output
from annotations.}

\item{\code{output_format}}{Which output format to use ("json", "xml", "conll").}

\item{\code{properties}}{A Properties Java object to control multithreading.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{StanfordCoreNLP$new()}}
\item \href{#method-annotate}{\code{StanfordCoreNLP$annotate()}}
\item \href{#method-process_files}{\code{StanfordCoreNLP$process_files()}}
\item \href{#method-verbose}{\code{StanfordCoreNLP$verbose()}}
\item \href{#method-clone}{\code{StanfordCoreNLP$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanfordCoreNLP$new(
  corenlp_dir = getOption("bignlp.corenlp_dir"),
  properties,
  output_format = c("xml", "json", "conll")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{corenlp_dir}}{Directory where StanfordCoreNLP resides.}

\item{\code{properties}}{Either the filename of a properties file or a Java
properties object.}

\item{\code{output_format}}{Either "json", "xml", "conll".}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-annotate"></a>}}
\if{latex}{\out{\hypertarget{method-annotate}{}}}
\subsection{Method \code{annotate()}}{
Annotate a string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanfordCoreNLP$annotate(txt, purge = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{txt}}{A (length-one) \code{character} vector to process.}

\item{\code{purge}}{Whether to postprocess output.}

\item{\code{id}}{An ID to prepend.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If output_format is "json" or "xml", a string is returned, if output_format is
"conll", a \code{data.frame}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-process_files"></a>}}
\if{latex}{\out{\hypertarget{method-process_files}{}}}
\subsection{Method \code{process_files()}}{
Process all files in the stated directory (argument \code{dir}).
Parallel processing is possible if a 'threads' key the properties
object is defined and sets a number of cores to use.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanfordCoreNLP$process_files(dir)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{Directory with files to process (in parallel).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The method returns (invisibly) the files expected to result from
the tagging exercise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-verbose"></a>}}
\if{latex}{\out{\hypertarget{method-verbose}{}}}
\subsection{Method \code{verbose()}}{
Set whether calls of the class shall be verbose.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanfordCoreNLP$verbose(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{A \code{logical} value. If \code{TRUE}, all status messages are shown, if
\code{FALSE}, only error messages are displayed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The class is returned invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StanfordCoreNLP$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
