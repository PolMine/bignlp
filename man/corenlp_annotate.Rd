% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corenlp.R
\name{corenlp_annotate}
\alias{corenlp_annotate}
\alias{corenlp_annotate,data.table-method}
\alias{corenlp_annotate,character-method}
\alias{corenlp_annotate,xml_document-method}
\title{Annotate a string.}
\usage{
corenlp_annotate(x, ...)

\S4method{corenlp_annotate}{data.table}(
  x,
  corenlp_dir = getOption("bignlp.corenlp_dir"),
  pipe,
  purge = TRUE,
  threads = 1L,
  inmemory = TRUE,
  progress = TRUE,
  verbose = TRUE
)

\S4method{corenlp_annotate}{character}(
  x,
  corenlp_dir = getOption("bignlp.corenlp_dir"),
  pipe,
  byline = NULL,
  output_format = "json",
  threads = 1L,
  progress = TRUE,
  preclean = TRUE,
  verbose = TRUE
)

\S4method{corenlp_annotate}{xml_document}(
  x,
  xpath = "//p",
  pipe,
  threads = 1L,
  cols = c("word", "lemma", "pos"),
  fmt = paste(rep("\%s", times = length(cols)), collapse = "\\t"),
  sentences = TRUE,
  ne = FALSE,
  inmemory = FALSE,
  purge = TRUE,
  opts = c("RECOVER", "NOERROR", "NOBLANKS", "HUGE", "COMPACT"),
  verbose = TRUE,
  progress = FALSE
)
}
\arguments{
\item{x}{Either a \code{data.table} (required to have the columns 'doc_id' and
'text'), or a character vector with input file(s), or a directory. If
\code{input} is a directory, all files in the directory are processed. Files are
assumed to be tsv files with two columns ('doc_id' and 'text').}

\item{...}{Further arguments.}

\item{corenlp_dir}{The directory where corenlp resides.}

\item{pipe}{A Pipe object or a properties file to configure annotator.}

\item{purge}{A \code{logical} value, whether to preprocess input.}

\item{threads}{An \code{integer} value.}

\item{inmemory}{If \code{TRUE}, documents are processed in-memory using
\code{AnnotationPipeline$annotate()}, if \code{FALSE}, documents written to disk
temporarily are used as input for \code{StanfordCoreNLP$process_files()}. See
details on a warning you may see when opting for the inmemory option and on
performance.}

\item{progress}{Logical, whether to show progress bar.}

\item{verbose}{Logical, whether to output messages.}

\item{byline}{Logical, whether to process files in a line-by-line manner.}

\item{output_format}{The output generated, either "json" (default), "txt", or
"xml".}

\item{preclean}{Logical, whether to preprocess string.}

\item{xpath}{An XPath expression for looking up nodes with text that shall be
annotated.}

\item{cols}{Columns of the parsed CoNLL output of annotation to be kept.}

\item{fmt}{A format string for styling the output of applying the annotation
pipeline. Defaults to a concatenating annotations seperated by tabs. Can be
used to generate XML output.}

\item{sentences}{A \code{logical} value - whether to wrap annotated
sentences in s tags.}

\item{ne}{A \code{logical} value, whether to turn column 'ner' into XML annotation
of named entities.}

\item{opts}{Passed into \code{read_xml()} as argument \code{options}. Defaults to a
options that make XML processing as robust as possible.}
}
\value{
The target files will be returned, so that they can serve as input to
\code{corenlp_parse_ndjson}.
}
\description{
Use CoreNLP to annotate strings.
}
\details{
If argument \code{threads} is 1, the tagging  result is returned, if output is
NULL. If \code{threads} is higher than 1, \code{output} should be a directory where
tagging results will be stored as NDJSON files.

If \code{inmemory} is \code{FALSE}, temporary files are used for input and output to
the CoreNLP. If you choose inmemory processing (\code{TRUE}), you may see a
warning beginning with "An illegal reflective access operation has occurred".
There will be subsequen messages on the operation of threads. Somewhat
against intuition, setting \code{inmemory} as \code{FALSE} yields better performance
and by circumventing the bottleneck of passing data between R and the Java
Virtual Machine directly. Using the temporary files does not provoke a
warning and is assumed to be more robust.

If \code{x} is an \code{xml_document}, text nodes of the input XML document
will be replaced by the annotated content of the text nodes. Note that this
is an in-place operation, i.e. the input XML document will be changed.
}
\examples{
library(data.table)
reuters_txt <- readLines(system.file(package = "bignlp", "extdata", "txt", "reuters.txt"))
reuters_dt <- data.table(doc_id = 1L:length(reuters_txt), text = reuters_txt)

props <- corenlp_get_properties_file(lang = "en", fast = "TRUE")
y <- corenlp_annotate(
  x = reuters_dt,
  pipe = props,
  corenlp_dir = corenlp_get_jar_dir(),
  progress = FALSE
)

y <- corenlp_annotate(
  x = reuters_dt,
  pipe = props,
  threads = TRUE,
  corenlp_dir = corenlp_get_jar_dir(),
  progress = FALSE
)
xml_files <- list.files(system.file(package = "bignlp", "extdata", "xml"))
xml_dir <- system.file(package = "bignlp", "extdata", "xml")
xml_files <- list.files(xml_dir, full.names = TRUE)
xml_doc <- xml2::read_xml(x = xml_files[[1]])

Pipe <- StanfordCoreNLP$new(
  output_format = "conll",
  properties = corenlp_get_properties_file(lang = "en", fast = TRUE)
)

xml_doc2 <- corenlp_annotate(x = xml_doc, pipe = Pipe, sentences = TRUE)

# Write annotated document to disc
y <- tempfile(fileext = ".xml")
xml2::write_xml(x = xml_doc, file = y, options = NULL)
}
