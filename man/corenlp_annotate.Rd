% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corenlp.R
\name{corenlp_annotate}
\alias{corenlp_annotate}
\alias{corenlp_annotate,data.table-method}
\alias{corenlp_annotate,character-method}
\alias{corenlp_annotate,xml_document-method}
\title{Annotate a string.}
\usage{
corenlp_annotate(x, ...)

\S4method{corenlp_annotate}{data.table}(
  x,
  corenlp_dir = getOption("bignlp.corenlp_dir"),
  properties,
  purge = TRUE,
  threads = 1L,
  progress = TRUE,
  verbose = TRUE
)

\S4method{corenlp_annotate}{character}(
  x,
  corenlp_dir = getOption("bignlp.corenlp_dir"),
  properties,
  byline = NULL,
  output_format = "json",
  threads = 1L,
  progress = TRUE,
  preclean = TRUE,
  verbose = TRUE
)

\S4method{corenlp_annotate}{xml_document}(
  x,
  xpath = "//p",
  pipe,
  cols = c("word", "lemma", "pos"),
  sentences = TRUE
)
}
\arguments{
\item{x}{Either a \code{data.table} (required to have the columns 'doc_id' and
'text'), or a character vector with input file(s), or a directory. If
\code{input} is a directory, all files in the directory are processed. Files
are assumed to be tsv files with two columns ('doc_id' and 'text').}

\item{...}{Further arguments.}

\item{corenlp_dir}{The directory where corenlp resides.}

\item{properties}{A properties file to configure annotator.}

\item{purge}{A \code{logical} value, whether to preprocess input.}

\item{threads}{An integer value.}

\item{progress}{Logical, whether to show progress bar.}

\item{verbose}{Logical, whether to output messages.}

\item{byline}{Logical, whether to process files in a line-by-line manner.}

\item{output_format}{The output generated, either "json" (default), "txt", or "xml".}

\item{preclean}{Logical, whether to preprocess string.}
}
\value{
The target files will be returned, so that they can serve as input to
\code{corenlp_parse_ndjson}.
}
\description{
Use CoreNLP to annotate strings.
}
\details{
If argument \code{threads} is 1, the tagging result is returned, if output is NULL.
If \code{threads} is higher than 1, \code{output} should be a directory where tagging
results will be stored as NDJSON files.
}
\examples{
library(data.table)
reuters_txt <- readLines(system.file(package = "bignlp", "extdata", "txt", "reuters.txt"))
reuters_dt <- data.table(doc_id = 1L:length(reuters_txt), text = reuters_txt)

props <- corenlp_get_properties_file(lang = "en", fast = "TRUE")
y <- corenlp_annotate(
  x = reuters_dt,
  properties = props,
  corenlp_dir = corenlp_get_jar_dir(),
  progress = FALSE
)
xml_files <- list.files(system.file(package = "bignlp", "extdata", "xml"))
xml_dir <- system.file(package = "bignlp", "extdata", "xml")
xml_files <- list.files(xml_dir, full.names = TRUE)
xml_doc <- xml2::read_xml(x = xml_files[[1]])

Pipe <- StanfordCoreNLP$new(
  output_format = "conll",
  properties = corenlp_get_properties_file(lang = "en", fast = TRUE)
)

xml_doc2 <- corenlp_annotate(x = xml_doc, pipe = Pipe, sentences = TRUE)

# Write annotated document to disc
y <- tempfile(fileext = ".xml")
write_xml(x = xml_doc, file = y, options = NULL)
}
